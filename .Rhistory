usethis::use_mit_license()
#'   hpo$id[match("Abnormality of the nervous system", hpo$name)]][[1]]
#' # Highlighting "Abnormality of ganglion" branch in the plot
#' highlighted_branches <- c("Abnormality of nervous system physiology")
#' # create the plot
#' plot_n_phenotypes_per_branch_hpo(highlighted_branches=highlighted_branches,
#'                                  background_branches=background_branches,
#'                                  wes_anderson_palette = "Moonrise3",
#'                                  phenotype_to_genes = phenotype_to_genes)
#' }
#' @export
plot_n_phenotypes_per_branch_hpo <- function(phenotype_to_genes,
hpo,
highlighted_branches =
c("Abnormality of the nervous system",
"Abnormality of the cardiovascular system",
"Abnormality of the immune system"),
background_branches = hpo$children["HP:0000118"][[1]],
wes_anderson_palette = "Moonrise3") {
color_pal = wesanderson::wes_palette(wes_anderson_palette, 2)
highlighted_branches_ids = hpo$id[match(highlighted_branches,hpo$name)]
phenos_per_branch = data.frame()
for (b in background_branches) {
n = length(ontologyIndex::get_descendants(hpo,b))
if (b %in% highlighted_branches_ids) {
target_branch = "target"
} else {
target_branch = "Other"
}
phenos_per_branch = rbind(phenos_per_branch, data.frame("branch"=hpo$name[b],"n_phenos"=n, "target"=target_branch))
}
phenos_per_branch$branch = stats::reorder(phenos_per_branch$branch, phenos_per_branch$n_phenos)
phenos_per_branch_plt <- ggplot(phenos_per_branch, aes(x=n_phenos, y=branch, color= target, fill=target))+
geom_segment(mapping= aes(xend = 0, yend = branch),  size = 3)+
xlab("Descendants (n)") +
ylab(element_blank())+
scale_color_manual(values=color_pal) +
theme(axis.line.x=element_blank(),panel.background=element_blank(), panel.grid.major = element_blank(),
panel.grid.minor=element_blank(),axis.line.y=element_line(color = "black"),
axis.ticks.x = element_blank(), axis.text.x = element_blank(),legend.position = "none")
return(phenos_per_branch_plt)
}
roxygen2::roxygenise
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::check()
get_term_definition <- function(ontologyId, line_length = FALSE) {
hpo_termdetails = httr::GET(paste0("hpo.jax.org/api/hpo/term/", ontologyId))
hpo_termdetails_char = rawToChar(hpo_termdetails$content)
hpo_termdetails_data = jsonlite::fromJSON(hpo_termdetails_char)
if (line_length > 0) {
definition = newlines_to_definition(hpo_termdetails_data$details$definition)
} else {
definition = hpo_termdetails_data$details$definition
}
return (definition)
}
get_term_definition("HP:000002")
get_term_definition("HP:0000002")
get_term_definition <- function(ontologyId, line_length = FALSE) {
hpo_termdetails = httr::GET(paste0("hpo.jax.org/api/hpo/term/", ontologyId))
hpo_termdetails_char = rawToChar(hpo_termdetails$content)
hpo_termdetails_data = jsonlite::fromJSON(hpo_termdetails_char)
if (line_length > 0) {
definition = newlines_to_definition(hpo_termdetails_data$details$definition,
line_length)
} else {
definition = hpo_termdetails_data$details$definition
}
return (definition)
}
get_term_definition("HP:0000002",4)
#' Adds new lines to the description so that hover boxes dont get too wide.
#'
#' @param definition A disease description string
#' @param line_length A integer representing the desired words per line.
#'
#' @returns The disease description with newline symbols added every nth word.
#'
#' @examples
#' \dontrun{newlines_to_definition(disease_description, 10)}
#' @export
newlines_to_definition <- function(definition, line_length = 10) {
definition = strsplit(definition, split = " ")[[1]]
if (length(definition) > line_length) {
remainder = length(definition) %% line_length
n_new_lines = floor((length(definition)/line_length))
new_line_index = seq(line_length,(n_new_lines*line_length),line_length)
definition[new_line_index] = paste0("\n", definition[new_line_index])
}
definition = paste(definition,collapse = " ")
return(definition)
}
get_term_definition("HP:0000002",4)
roxygen2::roxygenise()
devtools::check()
devtools::check()
roxygen2::roxygenise()
devtools::check()
?read.delim
roxygen2::roxygenise()
devtools::check()
roxygen2::roxygenise()
devtools::check()
roxygen2::roxygenise()
devtools::check()
roxygen2::roxygenise()
devtools::check()
print(paste0('file "',path,'" already exists'))
path = "asdf"
print(paste0('file "',path,'" already exists'))
cat(paste0('file "',path,'" already exists'))
roxygen2::roxygenise()
devtools::check()
disease_descriptions <- readRDS("C:/Users/bobby/Desktop/sci/GitHub/RD_EWCE_website/Cell_select_interactive/data/disease_descriptions.rds")
View(disease_descriptions)
#' This is a function for loading the phenotype to genes text file from HPO.
#' It adds the collumn names and returns as a dataframe
#'
#' @param pheno_to_genes_txt_file path to the phenotype to genes text file from the
#' HPO. It contains phenotypes annotated with associated genes
#' @examples \dontrun{
#' phenotype_to_genes <- load_phenotype2genes("data/phenotype_to_genes.txt")
#' }
#' @returns a dataframe of the phenotype_to_genes.txt file from HPO
#' @export
load_phenotype_to_genes <- function(pheno_to_genes_txt_file = "data/phenotype_to_genes.txt") {
phenotype_to_genes = utils::read.delim(pheno_to_genes_txt_file,
skip = 1,
header=FALSE)
colnames(phenotype_to_genes) = c("ID", "Phenotype", "EntrezID", "Gene",
"Additional", "Source", "LinkID")
return(phenotype_to_genes)
}
load_phenotype_to_genes("phenotype_to_genes.txt")
phenotype_to_genes=load_phenotype_to_genes("phenotype_to_genes.txt")
View(disease_descriptions)
#' Generate HPO disease desription dataframe
#'
#' This function will interact with the HPO API to create a dataframe that
#' contains a column of HPO IDs and a column of short descriptions describing
#' the phenotype.
#'
#' @param HPO_ids A character vector of HPO Ids
#' @returns A dataframe of HPO phenotype descriptions
#' @export
gen_disease_description_dataframe <- function(HPO_ids) {
descriptions = c()
for (id in HPO_ids) {
descriptions = append(descriptions, get_term_definition(id))
}
return(data.frame("HPO_Id"=HPO_ids, "description" = descriptions))
}
#' Generate HPO disease desription dataframe
#'
#' This function will interact with the HPO API to create a dataframe that
#' contains a column of HPO IDs and a column of short descriptions describing
#' the phenotype.
#'
#' @param HPO_ids A character vector of HPO Ids
#' @returns A dataframe of HPO phenotype descriptions
#' @export
gen_disease_description_dataframe <- function(HPO_ids) {
descriptions = c()
for (id in HPO_ids) {
descriptions = append(descriptions, get_term_definition(id))
}
return(data.frame("HPO_Id"=HPO_ids, "description" = descriptions))
}
descrip_test <- get_disease_description_dataframe(unique(phenotype_to_genes$ID)[1:10])
#' Generate HPO disease desription dataframe
#'
#' This function will interact with the HPO API to create a dataframe that
#' contains a column of HPO IDs and a column of short descriptions describing
#' the phenotype.
#'
#' @param HPO_ids A character vector of HPO Ids
#' @returns A dataframe of HPO phenotype descriptions
#' @export
gen_disease_description_dataframe <- function(HPO_ids) {
descriptions = c()
for (id in HPO_ids) {
descriptions = append(descriptions, get_term_definition(id))
}
return(data.frame("HPO_Id"=HPO_ids, "description" = descriptions))
}
descrip_test <- get_disease_description_dataframe(unique(phenotype_to_genes$ID)[1:10])
#' Generate HPO disease desription dataframe
#'
#' This function will interact with the HPO API to create a dataframe that
#' contains a column of HPO IDs and a column of short descriptions describing
#' the phenotype.
#'
#' @param HPO_ids A character vector of HPO Ids
#' @returns A dataframe of HPO phenotype descriptions
#' @export
gen_disease_description_dataframe <- function(HPO_ids) {
descriptions = c()
for (id in HPO_ids) {
descriptions = append(descriptions, get_term_definition(id))
}
return(data.frame("HPO_Id"=HPO_ids, "description" = descriptions))
}
#' Generate HPO disease desription dataframe
#'
#' This function will interact with the HPO API to create a dataframe that
#' contains a column of HPO IDs and a column of short descriptions describing
#' the phenotype.
#'
#' @param HPO_ids A character vector of HPO Ids
#' @returns A dataframe of HPO phenotype descriptions
#' @export
get_disease_description_dataframe <- function(HPO_ids) {
descriptions = c()
for (id in HPO_ids) {
descriptions = append(descriptions, get_term_definition(id))
}
return(data.frame("HPO_Id"=HPO_ids, "description" = descriptions))
}
descrip_test <- get_disease_description_dataframe(unique(phenotype_to_genes$ID)[1:10])
#' newlines every nth word. This can be useful when displaying the description
#' in plots with limited space.
#' @param ontologyId A HPO term Id (e.g. "HP:0000002") <string>
#' @param line_length The number of desired words per line <int>
#' @returns A disease definition <string>
#' @examples \dontrun{
#' ontologyId = "HP:0000002"
#' get_term_definition(ontologyId)
#' }
#' @export
get_term_definition <- function(ontologyId, line_length = FALSE) {
hpo_termdetails = httr::GET(paste0("hpo.jax.org/api/hpo/term/", ontologyId))
hpo_termdetails_char = rawToChar(hpo_termdetails$content)
hpo_termdetails_data = jsonlite::fromJSON(hpo_termdetails_char)
if (line_length > 0) {
definition = newlines_to_definition(hpo_termdetails_data$details$definition,
line_length)
} else {
definition = hpo_termdetails_data$details$definition
}
return (definition)
}
descrip_test <- get_disease_description_dataframe(unique(phenotype_to_genes$ID)[1:10])
View(descrip_test)
rm(descrip_test)
usethat::use_vignette("HPOExplorer")
devtools::use_vignette("HPOExplorer")
usethis::use_vignette("HPOExplorer")
devtools::document()
library(HPOExplorer)
phenotype_to_genes <- load_phenotype_to_genes("phenotype_to_genes.txt")
if (!require("ontologyIndex")) {
install.packages('ontologyIndex')
library('ontologyIndex')
}
data(hpo)
View(phenotype_to_genes)
# Get HPO ID of "Neurodevelopmental delay
Neuro_delay_ID <- phenotype_to_genes$ID[phenotype_to_genes$Phenotype == "Neurodevelopmental delay"]
# Get HPO ID of "Neurodevelopmental delay
Neuro_delay_ID <- phenotype_to_genes$ID[phenotype_to_genes$Phenotype == "Neurodevelopmental delay"][1]
# Get descendants that have gene annotations
Neuro_delay_descendants <- phenotype_to_genes[phenotype_to_genes$ID %in% get_descendants(Neuro_delay_ID)]
?get_descendants
# Get descendants that have gene annotations
Neuro_delay_descendants <- phenotype_to_genes[phenotype_to_genes$ID %in% get_descendants(hpo,Neuro_delay_ID)]
# Get descendants that have gene annotations
Neuro_delay_descendants <- phenotype_to_genes[phenotype_to_genes$ID %in% get_descendants(hpo,Neuro_delay_ID),]
get_ont_level(hpo, hpo$id[where(hpo$name) == "Phenotypic abnormality"])
hpo$id[where(hpo$name) == "Phenotypic abnormality"]
hpo$id[which(hpo$name) == "Phenotypic abnormality"]
hpo$id[which(hpo$name), "Phenotypic abnormality"]
hpo$id["Phenotypic abnormality",which(hpo$name)]
hpo$id[which("Phenotypic abnormality",hpo$name)]
hpo$id[which("Phenotypic abnormality" == hpo$name)]
get_term_definition("HP:0000118" )
get_ont_level(hpo,"HP:0000118" )
devtools::document()
# Get HPO ID of "Neurodevelopmental delay
Neuro_delay_ID <- get_hpo_termID_direct(hpo,"Neurodevelopmental delay")
# Get descendants that have gene annotations
Neuro_delay_descendants <- phenotype_to_genes[phenotype_to_genes$ID %in% get_descendants(hpo,Neuro_delay_ID),]
phenos = data.frame()
for (p in unique(Neuro_delay_descendants$Phenotype)) {
id <- get_hpo_termID(p, phenotype_to_genes)
ont_level <- get_ont_level(hpo, id)
ontLvl_geneCount_ratio <- ont_level/length(get_gene_list(p,phenotype_to_genes))
description <- get_term_definition(id, line_length = 10)
phenos <- append(phenos,
data.frame("HPO_Id"=id,
"Ontology_level"=ont_level,
"ontLvl_geneCount_ratio"=ontLvl_geneCount_ratio,
"description"=description))
}
phenos = data.frame()
for (p in unique(Neuro_delay_descendants$Phenotype)) {
id <- get_hpo_termID(p, phenotype_to_genes)
ont_level <- get_ont_level(hpo, id)
ontLvl_geneCount_ratio <- ont_level/length(get_gene_list(p,phenotype_to_genes))
description <- get_term_definition(id, line_length = 10)
phenos <- rbind(phenos,
data.frame("HPO_Id"=id,
"Ontology_level"=ont_level,
"ontLvl_geneCount_ratio"=ontLvl_geneCount_ratio,
"description"=description))
}
View(phenos)
phenos = data.frame()
for (p in unique(Neuro_delay_descendants$Phenotype)) {
id <- get_hpo_termID(p, phenotype_to_genes)
ont_level <- get_ont_level(hpo, id)
ontLvl_geneCount_ratio <- ont_level/length(get_gene_list(p,phenotype_to_genes))
description <- get_term_definition(id, line_length = 10)
phenos <- rbind(phenos,
data.frame("Phenotype"=p,
"HPO_Id"=id,
"Ontology_level"=ont_level,
"ontLvl_geneCount_ratio"=ontLvl_geneCount_ratio,
"description"=description))
}
View(phenos)
View(Neuro_delay_descendants)
length(get_ancestors(hpo,get_hpo_termID("Abnormality of the nervous system", phenotype_to_genes )))
length(get_ancestors(hpo,get_hpo_termID("Abnormality of the nervous system", phenotype_to_genes ))[[1]])
length(get_descendants(hpo,get_hpo_termID("Abnormality of the nervous system", phenotype_to_genes )))
test = c("one","two","three")
for (i in seq(1, length(test))) {print(test[i])}
make_hoverbox <- function(phenotype,phenos_dataframe,columns = c("HPO_Id", "description"), labels = c("ID","Description")) {
make_hoverbox <- function(phenotype,phenos_dataframe,columns = c("HPO_Id", "description"), labels = c("ID","Description")) {
if (length(columns) > 0 & length(labels) > 0) {
if (!length(columns) == length(lables)) {
print("number of columns must be same as number of labels")
return(phenotype)
} else {
hoverBox <- phenotype
for (i in seq(1,length(columns))) {
cur <- phenos_dataframe[phenos_dataframe$Phenotype == phenotype,columns[i]][1]
hoverBox <- paste0(hoverBox," \n",labels[i],": ",cur)
}
return(hoverBox)
}
}
}
()
)
make_hoverbox <- function(phenotype,phenos_dataframe,columns = c("HPO_Id", "description"), labels = c("ID","Description")) {
if (length(columns) > 0 & length(labels) > 0) {
if (!length(columns) == length(lables)) {
message("number of columns must be same as number of labels")
return(phenotype)
} else {
hoverBox <- phenotype
for (i in seq(1,length(columns))) {
cur <- phenos_dataframe[phenos_dataframe$Phenotype == phenotype,columns[i]][1]
hoverBox <- paste0(hoverBox," \n",labels[i],": ",cur)
}
return(hoverBox)
}
} else {
message("No parameters supplied to make hoverbox. Box will only include phenotype name")
return (phenotype)
}
}
hoverBox = c()
for (p in unique(phenos$Phenotype)) {
hoverBox <- append(hoverBox,
make_hoverbox(p,
phenos,
columns = c("HPO_Id",
"Ontology_level",
"ontLvl_geneCount_ratio",
"description"),
labels = c("ID",
"Ontology level",
"Description")))
}
make_hoverbox <- function(phenotype,phenos_dataframe,columns = c("HPO_Id", "description"), labels = c("ID","Description")) {
if (length(columns) > 0 & length(labels) > 0) {
if (!length(columns) == length(labels)) {
message("number of columns must be same as number of labels")
return(phenotype)
} else {
hoverBox <- phenotype
for (i in seq(1,length(columns))) {
cur <- phenos_dataframe[phenos_dataframe$Phenotype == phenotype,columns[i]][1]
hoverBox <- paste0(hoverBox," \n",labels[i],": ",cur)
}
return(hoverBox)
}
} else {
message("No parameters supplied to make hoverbox. Box will only include phenotype name")
return (phenotype)
}
}
hoverBox = c()
for (p in unique(phenos$Phenotype)) {
hoverBox <- append(hoverBox,
make_hoverbox(p,
phenos,
columns = c("HPO_Id",
"Ontology_level",
"ontLvl_geneCount_ratio",
"description"),
labels = c("ID",
"Ontology level",
"Description")))
}
hoverBox = c()
for (p in unique(phenos$Phenotype)) {
hoverBox <- append(hoverBox,
make_hoverbox(p,
phenos,
columns = c("HPO_Id",
"Ontology_level",
"ontLvl_geneCount_ratio",
"description"),
labels = c("ID",
"Ontology level",
"Description")))
}
phenos$hover_box <- hoverBox
View(phenos)
cat(phenos$hover_box[1])
make_hoverbox <- function(phenotype,phenos_dataframe,columns = c("HPO_Id", "description"), labels = c("ID","Description")) {
if (length(columns) > 0 & length(labels) > 0) {
if (!length(columns) == length(labels)) {
message("number of columns must be same as number of labels")
return(phenotype)
} else {
hoverBox <- phenotype
for (i in seq(1,length(columns))) {
cur <- phenos_dataframe[phenos_dataframe$Phenotype == phenotype,columns[i]][1]
hoverBox <- paste0(hoverBox," \n",labels[i],": ",cur)
}
return(hoverBox)
}
} else {
message("No parameters supplied to make hoverbox. Box will only include phenotype name")
return (phenotype)
}
}
hoverBox = c()
for (p in unique(phenos$Phenotype)) {
hoverBox <- append(hoverBox,
make_hoverbox(p,
phenos,
columns = c("HPO_Id",
"Ontology_level",
"ontLvl_geneCount_ratio",
"description"),
labels = c("ID",
"Ontology level",
"Ont lvl/ n genes"
"Description")))
hoverBox = c()
for (p in unique(phenos$Phenotype)) {
hoverBox <- append(hoverBox,
make_hoverbox(p,
phenos,
columns = c("HPO_Id",
"Ontology_level",
"ontLvl_geneCount_ratio",
"description"),
labels = c("ID",
"Ontology level",
"Ont.Lvl/n.genes",
"Description")))
}
phenos$hover_box <- hoverBox
cat(phenos$hover_box[1])
print("Here is an example hover box from this:")
cat(phenos$hover_box[1])
devtools::document()
rm(make_hoverbox())
library(HPOExplorer)
if (!require("HPOExplorer")) {
devtools::install_github("ovrhuman/HPOExplorer")
}
devtools::check()
